"""
Использование квадратного корня в цикле для проверки простоты числа связано с оптимизацией. Давайте рассмотрим это подробнее.

Объяснение:
Определение простого числа: Простое число — это число больше 1, которое делится только на 1 и на само себя.
Оптимизация проверки: Чтобы проверить, является ли число n простым, достаточно проверить делимость n на числа от 2 до квадратного корня из n. Если n делится на какое-либо из этих чисел, то оно не является простым.
Почему это работает:
Если число n можно представить как произведение двух чисел a и b (где a * b = n), то одно из этих чисел обязательно будет меньше или равно квадратному корню из n, а другое — больше или равно квадратному корню из n.
Например, если n = 36, то его делители: (1, 36), (2, 18), (3, 12), (4, 9), (6, 6). Заметьте, что после пары (6, 6) делители начинают повторяться в обратном порядке.
Таким образом, если n не делится на числа до квадратного корня из n, то оно не делится и на числа больше квадратного корня из n.
"""

def is_prime(n: int) -> bool:
    if n < 2:
        return False
    for i in range(2, int(n**0.5) + 1):
      
        if n % i == 0:
            return False
    return True

# Example usage
if __name__ == "__main__":
    test_numbers = [27]
    for number in test_numbers:
        print(f"{number} Шs prime: {is_prime(number)}")
